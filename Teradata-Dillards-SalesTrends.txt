# Query examples using the Dillard's transaction database provided by
# the University of Arkansas.

# Objective: Identify trends in sales volume based on time and location factors.

# Setting a default database...
DATABASE ua_dillards;

# First: Scanning for time gaps in database: How many distinct dates are there 
# in the transaction table for each month/year combination?...
SELECT EXTRACT(MONTH from saledate) AS sMonth, EXTRACT(YEAR from saledate) AS sYear, COUNT(DISTINCT saledate) AS DaysReported
FROM trnsact
GROUP BY sMonth, sYear
ORDER BY sYear, sMonth;

# 2004 has one missing day for November, December. 2005 has one missing day for March and only 27 days for August.
# These seem like holiday closings and perhaps August 2005 wasn't reported at full completion?
# The analysis will omit Aug 2005: SALEDATE < '2005-08-01'

#8 - 2004: 31
#9 - 2004: 30
#10 - 2004: 31
#11 - 2004: 29
#12 - 2004: 30
#1 - 2005: 31
#2 - 2005: 28
#3 - 2005: 30
#4 - 2005: 30
#5 - 2005: 31
#6 - 2005: 30
#7 - 2005: 31
#8 - 2005: 27

# What about at the store level? Anticipating patchy data due to reporting issues, store closings...
# Yes, there's variation. There are 12 cases of a store reporting less than 20 days in a month (incl. 5 reporting just 1 day).
# It may make sense to filter for stores HAVING >= 25 reporting days in a month or a similar criteria.
SELECT TOP 40 store, EXTRACT(MONTH from saledate) AS sMonth, EXTRACT(YEAR from saledate) AS sYear, COUNT(DISTINCT saledate) AS DaysReported
FROM trnsact
GROUP BY store, sMonth, sYear
ORDER BY DaysReported ASC;

# Note: About 20% of stores have some missing data. We'll look “average daily revenue” to
# accomodate this. 

# Calculating average daily revenue for each store/month/year combination in the database...
# These range from $1 (no doubt an error) to $105K:
SELECT TOP 50 Days.store, Days.sMonth, Days.sYear, SUM(t.sprice) AS SalesRevenue,
	AVG(Days.DaysReported) AS DaysReported, SUM(t.sprice)/AVG(Days.DaysReported) AS AvgDailyRevenue
FROM (
	SELECT store, EXTRACT(MONTH from saledate) AS sMonth, EXTRACT(YEAR from saledate) AS sYear, 
	COUNT(DISTINCT saledate) AS DaysReported
	FROM trnsact
	GROUP BY store, sMonth, sYear
	) AS Days LEFT JOIN trnsact t ON 
	EXTRACT(MONTH from t.saledate) = Days.sMonth AND EXTRACT(YEAR from saledate) = Days.sYear AND Days.store = t.store
WHERE t.saledate < '2005-08-01' AND t.stype = 'P'
GROUP BY Days.store, Days.sMonth, Days.sYear
ORDER BY AvgDailyRevenue DESC;

# Note: You can make a single label to describe the year and month information of a year/month/store 
# combination by writing: EXTRACT(YEAR from saledate)||EXTRACT(MONTH from saledate)
# For tips on string data syntax in Teradata, see:
# http://blog.extrobe.co.uk/blog/2015/02/13/concatenating-strings-in-teradata-and-what-to-watch-out-for-with-fixed-length-fields/

# Identifying the SKU with greatest total sales the summer months (June, July, Aug)...
# Note: Teradata does not allow for IF statements - use CASE WHEN instead.
# The top SKU was #4108011, a Clinique product:
SELECT TOP 5 t.sku, d.dept, ski.style, ski.brand, ski.color, SUM(t.sprice) AS SalesRevenue, 
	CASE WHEN EXTRACT(MONTH from t.saledate) IN (6,7, 8) 
	THEN 'summer' 
	END AS SummerFlag
FROM trnsact t LEFT JOIN skuinfo ski ON t.sku = ski.sku LEFT JOIN deptinfo d ON ski.dept = d.dept
WHERE SummerFlag = 'summer' AND SALEDATE < '2005-08-01' AND STYPE = 'P'
GROUP BY t.sku, d.dept, ski.style, ski.brand, ski.color, SummerFlag
ORDER BY SalesRevenue DESC;





